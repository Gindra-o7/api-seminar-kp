generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DokumenStatus {
  submitted
  verified
  rejected
}

enum JenisDokumen {
  SURAT_KETERANGAN_SELESAI_KP
  LEMBAR_PERNYATAAN_SELESAI_KP
  LAPORAN_TAMBAHAN_KP
  SURAT_BIMBINGAN_DOSEN
  FORM_KEHADIRAN_SEMINAR
  LEMBAR_FORM_BIMBINGAN
  PENGAJUAN_PENDAFTARAN_DISEMINASI
  SURAT_UNDANGAN_SEMINAR_HASIL
  BERITA_ACARA_SEMINAR
  DAFTAR_HADIR_SEMINAR
  LEMBAR_PENGESAHAN_KP
}

enum StatusSeminar {
  pending
  scheduled
  completed
  cancelled
}

enum LogType {
  created
  updated
  cancelled
  rescheduled
}

model Mahasiswa {
  nim           String     @id @unique
  nama          String

  dokumen       Dokumen[]
  jadwalSeminar Jadwal[]
  nilai         Nilai[]
}

model Dosen {
  nip           String   @id @unique
  email         String   @unique
  nama          String

  jadwalSeminar          Jadwal[]
  nilaiPenguji      Nilai[] @relation("NilaiToPenguji")
  nilaiPembimbing   Nilai[] @relation("NilaiToPembimbing")
}

model Dokumen {
  id            String          @id @default(uuid())
  nim           String
  jenisDokumen  JenisDokumen
  filePath      String
  tanggalUpload DateTime        @default(now())
  status        DokumenStatus   @default(submitted)
  komentar      String?

  mahasiswa     Mahasiswa @relation(fields: [nim], references: [nim])

  @@index([nim])
}

model Jadwal {
  id            String        @id @default(uuid())
  nim           String
  nip           String
  tanggal       DateTime
  waktuMulai    DateTime
  waktuSelesai  DateTime
  ruanganId     String
  status        StatusSeminar @default(pending)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  mahasiswa     Mahasiswa   @relation(fields: [nim], references: [nim])
  dosen         Dosen       @relation(fields: [nip], references: [nip])
  ruangan       Ruangan     @relation(fields: [ruanganId], references: [id])
  nilai         Nilai?

  @@index([nim])
  @@index([nip])
  @@index([ruanganId])
}

model Ruangan {
  id            String   @id @default(uuid())
  namaRuangan   String   @unique
  jadwal        Jadwal[]
}

model LogJadwal {
  id              String    @id @default(uuid())
  jadwalSeminarId String
  logType         LogType
  nip             String
  tanggalLama     DateTime?
  tanggalBaru     DateTime?
  ruanganLama     String?
  ruanganBaru     String?
  keterangan      String?
  createdAt       DateTime  @default(now())

  @@index([jadwalSeminarId])
}

model Nilai {
  id                String    @id @default(uuid())
  nim               String
  jadwalSeminarId   String
  nipPenguji        String
  nipPembimbing     String
  nilaiPembimbing   Float?
  nilaiPenguji      Float?

  jadwalSeminar     Jadwal @relation(fields: [jadwalSeminarId], references: [id])
  dosenPenguji      Dosen? @relation("NilaiToPenguji", fields: [nipPenguji], references: [nip])
  dosenPembimbing   Dosen? @relation("NilaiToPembimbing", fields: [nipPembimbing], references: [nip])

  @@index([jadwalSeminarId])
  @@unique([jadwalSeminarId])
  Mahasiswa Mahasiswa[]
}
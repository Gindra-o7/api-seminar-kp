generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DokumenStatus {
  submitted
  verified
  rejected
}

enum JenisDokumen {
  SURAT_KETERANGAN_SELESAI_KP
  LEMBAR_PERNYATAAN_SELESAI_KP
  LAPORAN_TAMBAHAN_KP
  SURAT_BIMBINGAN_DOSEN
  FORM_KEHADIRAN_SEMINAR
  LEMBAR_FORM_BIMBINGAN
  PENGAJUAN_PENDAFTARAN_DISEMINASI
  SURAT_UNDANGAN_SEMINAR_HASIL
  BERITA_ACARA_SEMINAR
  DAFTAR_HADIR_SEMINAR
  LEMBAR_PENGESAHAN_KP
}

enum StatusSeminar {
  pending
  scheduled
  completed
  cancelled
}

enum LogType {
  created
  updated
  cancelled
  rescheduled
}

model Mahasiswa {
  nim             String    @id @unique
  nama            String
  no_telepon      String    @unique

  dokumen         Dokumen[]
  jadwal_seminar  Jadwal[]
  nilai           Nilai[]
}

model Dosen {
  nip               String    @id @unique
  email             String    @unique
  nama              String
  no_telepon        String    @unique

  jadwal_seminar    Jadwal[]
  nilai_penguji     Nilai[] @relation("NilaiToPenguji")
  nilai_pembimbing  Nilai[] @relation("NilaiToPembimbing")
}

model Dokumen {
  id              String          @id @default(uuid())
  nim             String
  jenis_dokumen   JenisDokumen
  file_path       String
  tanggal_upload  DateTime        @default(now())
  status          DokumenStatus   @default(submitted)
  komentar        String?

  mahasiswa       Mahasiswa @relation(fields: [nim], references: [nim])

  @@index([nim])
}

model Jadwal {
  id            String        @id @default(uuid())
  nim           String
  nip           String
  tanggal       DateTime
  waktu_mulai   DateTime
  waktu_selesai DateTime
  ruangan_nama  String
  status        StatusSeminar @default(pending)

  mahasiswa     Mahasiswa   @relation(fields: [nim], references: [nim])
  dosen         Dosen       @relation(fields: [nip], references: [nip])
  ruangan       Ruangan     @relation(fields: [ruangan_nama], references: [nama])
  nilai         Nilai?

  @@index([nim])
  @@index([nip])
  @@index([ruangan_nama])
}

model Ruangan {
  nama    String   @id @unique
  jadwal  Jadwal[]
}

model LogJadwal {
  id                String    @id @default(uuid())
  jadwal_seminar_id String
  log_type          LogType
  nip               String
  tanggal_lama      DateTime?
  tanggal_baru      DateTime?
  ruangan_lama      String?
  ruangan_baru      String?
  keterangan        String?
  created_at        DateTime  @default(now())

  @@index([jadwal_seminar_id])
}

model Nilai {
  id                  String    @id @default(uuid())
  nim                 String
  jadwal_seminar_id   String
  nip_penguji         String
  nip_pembimbing      String
  nilai_pembimbing    Float?
  nilai_penguji       Float?

  jadwal_seminar      Jadwal @relation(fields: [jadwal_seminar_id], references: [id])
  dosen_penguji       Dosen? @relation("NilaiToPenguji", fields: [nip_penguji], references: [nip])
  dosen_pembimbing    Dosen? @relation("NilaiToPembimbing", fields: [nip_pembimbing], references: [nip])

  @@index([jadwal_seminar_id])
  @@unique([jadwal_seminar_id])
  Mahasiswa Mahasiswa[]
}